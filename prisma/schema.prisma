// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                     BigInt                 @id @default(autoincrement())
    firstName              String                 @db.VarChar(256)
    lastName               String                 @db.VarChar(256)
    profilePicture         String?                @db.Text
    userName               String                 @unique @db.VarChar(95)
    mobileNumber           String                 @db.VarChar(15)
    emailId                String                 @unique @db.VarChar(95)
    password               String                 @db.Text
    salt                   String                 @db.VarChar(256)
    address                String                 @db.Text
    city                   String?                @db.VarChar(256)
    street                 String?                @db.VarChar(256)
    isSuspended            Boolean                @default(false)
    isVerify               Boolean                @default(false)
    isSubscriptionComplete Boolean                @default(false)
    createdAt              DateTime               @default(now()) @db.Timestamp(6)
    updatedAt              DateTime?              @db.DateTime
    Role                   Role[]
    UserRole               UserRole[]
    RefreshToken           RefreshToken[]
    Category               Category[]
    Book                   Book[]
    usera                  Book[]                 @relation("usera")
    Subscription           Subscription[]
    UserSubscription       UserSubscription[]
    Cart                   Cart[]
    Order                  Order[]
    UserCurrentBook        UserCurrentBook[]
    UserBookExchangeLogs   UserBookExchangeLogs[]
    Event                  Event[]
    Discussion             Discussion[]
    DiscussionAnswer       DiscussionAnswer[]
    BookLikeDislike        BookLikeDislike[]
    BookReview             BookReview[]
    BookRating             BookRating[]
    ForgotPassword         ForgotPassword[]
    EventRegistration      EventRegistration[]
    UserBook               UserBook[]
}

model Role {
    id          BigInt     @id @default(autoincrement())
    name        String     @db.VarChar(256)
    description String     @db.Text
    createdAt   DateTime   @default(now()) @db.Timestamp(6)
    createdBy   BigInt
    User        User       @relation(references: [id], fields: [createdBy])
    UserRole    UserRole[]
}

model UserRole {
    id     BigInt @id @default(autoincrement())
    userId BigInt
    User   User   @relation(references: [id], fields: [userId])
    roleId BigInt
    Role   Role   @relation(references: [id], fields: [roleId])
}

model RefreshToken {
    id        BigInt   @id @default(autoincrement())
    userId    BigInt
    User      User     @relation(references: [id], fields: [userId])
    Token     String   @db.Text
    createdAt DateTime @default(now()) @db.Timestamp(6)
}

model ForgotPassword {
    id        BigInt   @id @default(autoincrement())
    userId    BigInt
    emailId   String   @db.VarChar(256)
    nonce     String   @db.Text
    createdAt DateTime @default(now()) @db.Timestamp(6)
    User      User     @relation(fields: [userId], references: [id])
}

model Email {
    id        BigInt    @id @default(autoincrement())
    address   String    @db.Text
    subject   String    @db.Text
    content   String    @db.Text
    status    String    @db.VarChar(256)
    error     String?   @db.Text
    sentAt    DateTime? @db.Timestamp(6)
    createdAt DateTime  @default(now()) @db.Timestamp(6)
}

model Category {
    id           BigInt         @id @default(autoincrement())
    categoryName String         @db.VarChar(256)
    description  String?        @db.Text
    createdBy    BigInt
    User         User           @relation(references: [id], fields: [createdBy])
    type         CategoryType
    isActivated  Boolean        @default(true)
    createdAt    DateTime       @default(now()) @db.Timestamp(6)
    updatedAt    DateTime?      @db.DateTime
    BookCategory BookCategory[]
    Discussion   Discussion[]
}

enum CategoryType {
    BOOK
    DISCUSSION
}

model Book {
    id              BigInt            @id @default(autoincrement())
    bookName        String            @db.VarChar(256)
    authorId        BigInt?
    BookAuthor      BookAuthor?       @relation(fields: [authorId], references: [id])
    isbn            String?           @db.VarChar(256)
    pages           Int?              @db.Int
    description     String?           @db.Text
    price           Decimal           @db.Decimal(10, 2)
    titleImage      String            @db.Text
    stock           BigInt            @default(1)
    avgRating       Float?            @db.Float
    createdBy       BigInt
    verifyBy        BigInt?
    User            User              @relation(references: [id], fields: [createdBy])
    UserA           User?             @relation("usera", references: [id], fields: [verifyBy])
    isActivated     Boolean           @default(false)
    createdAt       DateTime          @default(now()) @db.Timestamp(6)
    updatedAt       DateTime?         @db.DateTime
    BookImage       BookImage[]
    BookCategory    BookCategory[]
    Cart            Cart[]
    OrderDetail     OrderDetail[]
    BookLikeDislike BookLikeDislike[]
    BookReview      BookReview[]
    BookRating      BookRating[]
    UserBook        UserBook[]
}

model UserBook {
    id        BigInt   @id @default(autoincrement())
    userId    BigInt
    User      User     @relation(fields: [userId], references: [id])
    bookId    BigInt
    Book      Book     @relation(fields: [bookId], references: [id])
    createdAt DateTime @default(now()) @db.Timestamp(6)
}

model BookAuthor {
    id             BigInt    @id @default(autoincrement())
    name           String    @db.VarChar(255)
    profilePicture String    @db.Text
    createdAt      DateTime  @default(now()) @db.Timestamp(6)
    updatedAt      DateTime? @db.Timestamp(6)
    Book           Book[]
}

model BookImage {
    id        BigInt    @id @default(autoincrement())
    bookId    BigInt
    Book      Book      @relation(references: [id], fields: [bookId])
    image     String    @db.Text
    createdAt DateTime  @default(now()) @db.Timestamp(6)
    updatedAt DateTime? @db.DateTime
}

model BookCategory {
    id         BigInt   @id @default(autoincrement())
    bookId     BigInt
    Book       Book     @relation(references: [id], fields: [bookId])
    categoryId BigInt
    Category   Category @relation(references: [id], fields: [categoryId])
}

model BookLikeDislike {
    id        BigInt    @id @default(autoincrement())
    bookId    BigInt
    Book      Book      @relation(references: [id], fields: [bookId])
    userId    BigInt
    User      User      @relation(references: [id], fields: [userId])
    isLiked   Boolean
    createdAt DateTime  @default(now()) @db.Timestamp(6)
    updatedAt DateTime? @db.DateTime
}

model BookReview {
    id        BigInt    @id @default(autoincrement())
    bookId    BigInt
    Book      Book      @relation(references: [id], fields: [bookId])
    userId    BigInt
    User      User      @relation(references: [id], fields: [userId])
    review    String    @db.Text
    createdAt DateTime  @default(now()) @db.Timestamp(6)
    updatedAt DateTime? @db.DateTime
}

model BookRating {
    id        BigInt    @id @default(autoincrement())
    bookId    BigInt
    Book      Book      @relation(references: [id], fields: [bookId])
    userId    BigInt
    User      User      @relation(references: [id], fields: [userId])
    rating    Float     @db.Float
    createdAt DateTime  @default(now()) @db.Timestamp(6)
    updatedAt DateTime? @db.DateTime
}

model Subscription {
    id               BigInt             @id @default(autoincrement())
    title            String             @db.VarChar(256)
    description      String?            @db.Text
    type             SubscriptionType
    noOfBook         Int                @default(0) @db.Int
    deposite         Decimal            @default(0.0) @db.Decimal(10, 2)
    price            Decimal            @db.Decimal(10, 2)
    createdBy        BigInt
    User             User               @relation(references: [id], fields: [createdBy])
    createdAt        DateTime           @default(now()) @db.Timestamp(6)
    updatedAt        DateTime?          @db.DateTime
    UserSubscription UserSubscription[]
}

enum SubscriptionType {
    BOOK
    DEPOSITE
}

model UserSubscription {
    id                    BigInt                  @id @default(autoincrement())
    subscriptionId        BigInt
    Subscription          Subscription            @relation(references: [id], fields: [subscriptionId])
    userId                BigInt
    User                  User                    @relation(references: [id], fields: [userId])
    title                 String                  @db.VarChar(256)
    description           String?                 @db.Text
    type                  SubscriptionType
    noOfBook              Int                     @default(0) @db.Int
    deposite              Decimal                 @default(0.0) @db.Decimal(10, 2)
    price                 Decimal                 @db.Decimal(10, 2)
    createdAt             DateTime                @default(now()) @db.Timestamp(6)
    updatedAt             DateTime?               @db.DateTime
    UserSubscriptionUsage UserSubscriptionUsage[]
}

model UserSubscriptionUsage {
    id                 BigInt           @id @default(autoincrement())
    userSubscriptionId BigInt
    UserSubscription   UserSubscription @relation(references: [id], fields: [userSubscriptionId])
    noOfBookUploaded   Int              @default(0) @db.Int
    priceDeposited     Decimal          @default(0.0) @db.Decimal(10, 2)
    createdAt          DateTime         @default(now()) @db.Timestamp(6)
    updatedAt          DateTime?        @db.DateTime
}

model Cart {
    id        BigInt    @id @default(autoincrement())
    userId    BigInt
    User      User      @relation(references: [id], fields: [userId])
    bookId    BigInt
    Book      Book      @relation(references: [id], fields: [bookId])
    quantity  Int       @default(1) @db.Int
    createdAt DateTime  @default(now()) @db.Timestamp(6)
    updatedAt DateTime? @db.DateTime
}

model Order {
    id                   BigInt                 @id @default(autoincrement())
    userId               BigInt
    User                 User                   @relation(references: [id], fields: [userId])
    status               OrderStatus            @default(PENDING)
    firstName            String?                @db.VarChar(255)
    lastName             String?                @db.VarChar(255)
    emailId              String?                @db.VarChar(255)
    mobileNumber         String?                @db.VarChar(15)
    deliveryAddress      String?                @db.Text
    totalAmount          Decimal                @db.Decimal(10, 2)
    createdAt            DateTime               @default(now()) @db.Timestamp(6)
    updatedAt            DateTime?              @db.DateTime
    OrderDetail          OrderDetail[]
    UserCurrentBook      UserCurrentBook[]
    UserBookExchangeLogs UserBookExchangeLogs[]
    asd                  UserBookExchangeLogs[] @relation("asd")
}

enum OrderStatus {
    PENDING
    DELIVERED
    ONTHEWAY
    CANCLE
}

model OrderDetail {
    id        BigInt    @id @default(autoincrement())
    orderId   BigInt
    Order     Order     @relation(references: [id], fields: [orderId])
    bookId    BigInt
    Book      Book      @relation(references: [id], fields: [bookId])
    quantity  Int       @db.Int
    price     Decimal   @db.Decimal(10, 2)
    createdAt DateTime  @default(now()) @db.Timestamp(6)
    updatedAt DateTime? @db.DateTime
}

model UserCurrentBook {
    id        BigInt    @id @default(autoincrement())
    orderId   BigInt
    Order     Order     @relation(references: [id], fields: [orderId])
    userId    BigInt
    User      User      @relation(references: [id], fields: [userId])
    createdAt DateTime  @default(now()) @db.Timestamp(6)
    updatedAt DateTime? @db.DateTime
}

model UserBookExchangeLogs {
    id              BigInt   @id @default(autoincrement())
    userId          BigInt
    User            User     @relation(references: [id], fields: [userId])
    previousOrderId BigInt
    latestOrderId   BigInt
    Order           Order    @relation("asd", references: [id], fields: [previousOrderId])
    OrderA          Order    @relation(references: [id], fields: [latestOrderId])
    createdAt       DateTime @default(now()) @db.Timestamp(6)
}

model Event {
    id                BigInt              @id @default(autoincrement())
    title             String              @db.VarChar(256)
    subTitle          String              @db.VarChar(256)
    body              String              @db.Text
    titleImage        String              @db.Text
    startAt           DateTime            @db.Timestamp(6)
    endAt             DateTime?           @db.DateTime
    shifts            String              @db.VarChar(256)
    eligibility       String              @db.Text
    isFree            Boolean
    fee               Int                 @default(0) @db.Int
    venue             String              @db.VarChar(256)
    registrationEndAt DateTime?           @db.Timestamp(6)
    createdBy         BigInt
    User              User                @relation(references: [id], fields: [createdBy])
    isActive          Boolean             @default(false)
    createdAt         DateTime            @default(now()) @db.Timestamp(6)
    updatedAt         DateTime?           @db.DateTime
    EventBenefits     EventBenefits[]
    EventSpeakers     EventSpeakers[]
    EventRequirements EventRequirements[]
    EventLearning     EventLearning[]
    EventRegistration EventRegistration[]
}

model EventBenefits {
    id        BigInt   @id @default(autoincrement())
    eventId   BigInt
    Event     Event    @relation(references: [id], fields: [eventId])
    benefits  String   @db.Text
    createdAt DateTime @default(now()) @db.Timestamp(6)
}

model EventSpeakers {
    id             BigInt   @id @default(autoincrement())
    eventId        BigInt
    Event          Event    @relation(references: [id], fields: [eventId])
    profilePicture String   @db.Text
    name           String   @db.VarChar(255)
    designation    String   @db.VarChar(255)
    company        String   @db.VarChar(255)
    createdAt      DateTime @default(now()) @db.Timestamp(6)
}

model EventRequirements {
    id           BigInt   @id @default(autoincrement())
    eventId      BigInt
    Event        Event    @relation(references: [id], fields: [eventId])
    requirements String   @db.Text
    createdAt    DateTime @default(now()) @db.Timestamp(6)
}

model EventLearning {
    id        BigInt   @id @default(autoincrement())
    eventId   BigInt
    Event     Event    @relation(references: [id], fields: [eventId])
    learning  String   @db.Text
    createdAt DateTime @default(now()) @db.Timestamp(6)
}

model EventRegistration {
    id            BigInt    @id @default(autoincrement())
    eventId       BigInt
    Event         Event     @relation(references: [id], fields: [eventId])
    userId        BigInt
    User          User      @relation(references: [id], fields: [userId])
    isPaymentDone Boolean   @default(false)
    createdAt     DateTime  @default(now()) @db.Timestamp(6)
    updatedAt     DateTime? @db.Timestamp(6)
}

model Blog {
    id         BigInt     @id @default(autoincrement())
    title      String     @db.VarChar(256)
    subTitle   String     @db.VarChar(256)
    body       String     @db.Text
    titleImage String     @db.Text
    blogWriter BigInt
    BlogWriter BlogWriter @relation(references: [id], fields: [blogWriter])
    createdAt  DateTime   @default(now()) @db.Timestamp(6)
    updatedAt  DateTime?  @db.DateTime
    userId     BigInt?
}

model BlogWriter {
    id             BigInt    @id @default(autoincrement())
    name           String    @db.VarChar(256)
    profilePicture String?   @db.VarChar(256)
    emailId        String    @db.VarChar(95)
    designation    String    @db.VarChar(256)
    about          String    @db.Text
    fbLink         String    @db.VarChar(256)
    instaLink      String    @db.VarChar(256)
    ytLink         String    @db.VarChar(256)
    createdAt      DateTime  @default(now()) @db.Timestamp(6)
    updatedAt      DateTime? @db.DateTime
    Blog           Blog[]
}

model Discussion {
    id               BigInt             @id @default(autoincrement())
    titleImage       String             @db.Text
    question         String             @db.Text
    createdBy        BigInt
    User             User               @relation(references: [id], fields: [createdBy])
    categoryId       BigInt
    Category         Category           @relation(references: [id], fields: [categoryId])
    createdAt        DateTime           @default(now()) @db.Timestamp(6)
    updatedAt        DateTime?          @db.DateTime
    DiscussionAnswer DiscussionAnswer[]
}

model DiscussionAnswer {
    id           BigInt     @id @default(autoincrement())
    discussionId BigInt
    Discussion   Discussion @relation(references: [id], fields: [discussionId])
    answeredBy   BigInt
    User         User       @relation(references: [id], fields: [answeredBy])
    answer       String     @db.Text
    createdAt    DateTime   @default(now()) @db.Timestamp(6)
}
